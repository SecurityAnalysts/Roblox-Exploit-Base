module;

#include <array>
#include <iostream>

export module rbx.init;

import rbx.constants;
import rbx.object;
import rbx.api;

export namespace rbx {
	void init(rbx::State* R) {
		rbx::getglobal(R, "game");
		std::cout << "TUSERDATA: " << static_cast<std::uint16_t>(rbx::TUSERDATA = rbx::type(R, -1)) << '\n';

		rbx::getfield(R, -1, "PlaceId");
		std::cout << "TNUMBER: " << static_cast<std::uint16_t>(rbx::TNUMBER = rbx::type(R, -1)) << '\n';
		rbx::pop(R, 1);

		rbx::getfield(R, -1, "Name");
		std::cout << "TSTRING: " << static_cast<std::uint16_t>(rbx::TSTRING = rbx::type(R, -1)) << '\n';
		rbx::pop(R, 1);

		rbx::getfield(R, -1, "Archivable");
		std::cout << "TBOOLEAN: " << static_cast<std::uint16_t>(rbx::TBOOLEAN = rbx::type(R, -1)) << '\n';
		rbx::pop(R, 2);

		rbx::getglobal(R, "Vector3");
		std::cout << "TTABLE: " << static_cast<std::uint16_t>(rbx::TTABLE = rbx::type(R, -1)) << '\n';

		rbx::getfield(R, -1, "new");
		std::cout << "TFUNCTION: " << static_cast<std::uint16_t>(rbx::TFUNCTION = rbx::type(R, -1)) << '\n';

		rbx::pcall(R, 0, 1, 0);
		std::cout << "TVECTOR: " << static_cast<std::uint16_t>(rbx::TVECTOR = rbx::type(R, -1)) << '\n';
		rbx::pop(R, 2);

		std::array types{ TNUMBER, TSTRING, TVECTOR, TBOOLEAN };

		for (std::size_t type_id = 1; type_id < 5; type_id++) {
			if (std::find(types.begin(), types.end(), type_id) == types.end()) {
				rbx::TLIGHTUSERDATA = type_id;
				std::cout << "TLIGHTUSERDATA: " << static_cast<std::uint16_t>(type_id) << '\n';
				break;
			}
		}
	}
}
