module;

#include <cstdint>
#include <cstddef>

export module rbx.object;

import rbx.constants;

export namespace rbx {
	struct TValue {
		union {
			void* p;
			std::uint64_t n_xor;
			bool b;
		} value;
		std::uintptr_t _;
		int tt;
	};

	struct State {
		std::uint8_t _[20];
		rbx::TValue* top;
		rbx::TValue* base;
	};

	using CFunction = int(*)(State*);

	auto setnvalue = [](rbx::TValue* obj, double val, uint64_t cipher) {
		obj->value.n_xor = cipher ^ *reinterpret_cast<uint64_t*>(&val);
		obj->tt = rbx::TNUMBER;
	};

	auto setobj = [](rbx::TValue* obj, rbx::TValue* obj2) {
		*obj = *obj2;
	};

	auto setpvalue = [](rbx::TValue* obj, void* p) {
		obj->value.p = p;
		obj->tt = rbx::TLIGHTUSERDATA;
	};

	auto setnilvalue = [](rbx::TValue* obj) {
		obj->tt = rbx::TNIL;
	};

	auto incr_top = [](State* R) {
		*reinterpret_cast<uintptr_t*>(reinterpret_cast<uintptr_t>(R) + offsetof(State, top)) += sizeof(rbx::TValue);
	};

	auto decr_top = [](State* R) {
		*reinterpret_cast<uintptr_t*>(reinterpret_cast<uintptr_t>(R) + offsetof(State, top)) -= sizeof(rbx::TValue);
	};
}
