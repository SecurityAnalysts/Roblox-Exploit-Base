module;

#include <cstdint>
#include <Windows.h>
#include <string>

export module memory;

export namespace mem {
	[[nodiscard]] inline std::uintptr_t rebase(const std::uintptr_t& address, const std::uintptr_t& base = 0x400000) {
		return address - base + reinterpret_cast<std::uintptr_t>(GetModuleHandle(nullptr));
	}

	[[nodiscard]] bool check(const std::uint8_t* pd, const std::uint8_t* aob, const char* mask) {
		for (; *mask; ++mask, ++pd, ++aob) {
			if (*mask != '?' && *pd != *aob) {
				return false;
			}
		}

		return (*mask) == NULL;
	}

	[[nodiscard]] std::uintptr_t find_pattern(const char* aob, const char* mask) {
		for (uintptr_t ind = reinterpret_cast<uintptr_t>(GetModuleHandleA(nullptr)); ind <= 0xFFFFFFF; ++ind) {
			if (check(reinterpret_cast<std::uint8_t*>(ind), (std::uint8_t*)(aob), mask)) {
				return ind;
			}
		}

		return NULL;
	}
}
