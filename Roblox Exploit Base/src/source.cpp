#include <iostream>
#include <thread>
#include <functional>
#include <Windows.h>

import rbx.api;
import rbx.init;
import rbx.object;
import rbx.task_scheduler;
import rbx.bypass.console;
import rbx.bypass.callcheck;
import rbx.constants;

int main() {
	rbx::bypass::console(L"Base");

	auto scheduler = rbx::get_task_scheduler();
	scheduler->hook_job();
	scheduler->push([]() {
		rbx::State* roblox_state = rbx::get_lua_state();

		rbx::init(roblox_state);
		rbx::bypass::callcheck();

		rbx::pushcclosure(roblox_state, [](rbx::State* R) {
			const auto& thread = reinterpret_cast<rbx::State*>(rbx::topointer(R, 1));
			
			rbx::pushvalue(thread, rbx::GLOBALS);
			rbx::pushobject(R, rbx::index2adr(thread, -1));

			return 1;
		}, 0);
		rbx::setregistry(roblox_state, "gettenv");
	});

	return 0;
}

bool __stdcall DllMain(void* instance_handle, std::uintptr_t reason, void*) {
	switch (reason) {
	case DLL_PROCESS_ATTACH:
		std::thread(main).detach();
		break;
	case DLL_PROCESS_DETACH:
		break;
	}

	return true;
}
