#include <iostream>
#include <thread>
#include <functional>
#include <Windows.h>

import rbx.api;
import rbx.init;
import rbx.object;
import rbx.task_scheduler;
import rbx.bypass.console;
import rbx.bypass.callcheck;
import rbx.constants;
import rbx.implement;

int main() {
	rbx::bypass::console(L"Base");

	auto scheduler = rbx::get_task_scheduler();
	scheduler->hook_job();
	scheduler->push([]() {
		rbx::State* roblox_state = rbx::get_lua_state();
		rbx::State* main_state = rbx::newthread(roblox_state);

		rbx::main_state = main_state;
		rbx::roblox_state = roblox_state;

		rbx::ref(roblox_state, rbx::REGISTRY);

		rbx::sandbox(main_state, 7);
		rbx::init(main_state);
		rbx::bypass::callcheck();

		rbx::implement::init(main_state);

		rbx::pushcclosure(main_state, [](rbx::State* R) {
			rbx::getglobal(R, "game");
			rbx::getfield(R, -1, "Players");
			rbx::getfield(R, -1, "LocalPlayer");
			rbx::getfield(R, -1, "Character");
			rbx::getfield(R, -1, "Humanoid");
			rbx::pushnumber(R, 50);

			std::cout << "WalkSpeed: " << rbx::tonumber(R, -1) << '\n';

			rbx::setfield(R, -2, "WalkSpeed");
			return 0;
		}, 0);
		rbx::setregistry(main_state, "dowalkspeed");
	});

	return 0;
}

bool __stdcall DllMain(void* instance_handle, std::uintptr_t reason, void*) {
	switch (reason) {
	case DLL_PROCESS_ATTACH:
		std::thread(main).detach();
		break;
	case DLL_PROCESS_DETACH:
		break;
	}

	return true;
}
